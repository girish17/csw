== CCS - Command and Control Service ==

The ccs project defines the basic classes and traits for the ''Command and Control Service''.

This is an [[http://akka.io/ Akka actor]] based project.
The main actors (or actor traits) here are:

- ''AssemblyController'' - trait for an actor that accepts configurations for an Assembly and communicates with
    one or more HCDs or other assemblies before replying with a command status

- ''HcdController'' - trait for an actor that accepts configurations (from an Assembly) for an HCD.
    The HCD controller publishes its *current state*, and the assembly can subscribe to it to determine when a command has completed.

- ''PeriodicHcdController'' - like HcdController, but has a Queue of configurations that it checks at a specified rate.
    This controller wakes up regularly, checks the incoming queue and updates its state variable with the current
    state of the HCD.

- ''StateMatcherActor'' - an actor used to match demand and current state and then notify a given actor


=== Example HCD Controller Usage ===

{{{
  class TestHcdController extends HcdController with Actor with ActorLogging {

    // Use single worker actor to do work in the background
    // (could also use a worker per job/message if needed)
    val worker = context.actorOf(TestWorker.props())

    // Send the config to the worker for processing
    override protected def process(config: Setup): Unit = {
      worker ! config
    }

    // Optional override: Ask the worker actor to send us the current state (handled by parent trait)
    override protected def requestCurrent(): Unit = {
      worker ! TestWorker.RequestCurrentState
    }

    // Use the default actor receive method defined in the parent
    override def receive: Receive = controllerReceive
  }
}}}

